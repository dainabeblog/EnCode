#pragma checksum "C:\Users\S.Ymashiro\github.com\dainabeblog\EnableCode\EnableCode\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "459904788f11b54d867dab8cba2f40a0b70f1c89"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(EnableCode.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace EnableCode.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\S.Ymashiro\github.com\dainabeblog\EnableCode\EnableCode\Pages\_ViewImports.cshtml"
using EnableCode;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"459904788f11b54d867dab8cba2f40a0b70f1c89", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2146cb783af8ebe0a8e126c3ce65897bfab88593", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\S.Ymashiro\github.com\dainabeblog\EnableCode\EnableCode\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral("    <script src=\"js/class/Typing.js\"></script>\r\n    <script src=\"js/class/FlashingText.js\"></script>\r\n");
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Welcome</h1>
    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>







<script>
    // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
    // JavaScript start

    // タイピングゲームの状態コード
    const READY = 0;    // 準備中
    const PLAYING = 1;  // タイピングゲーム中
    const END = 2;      // ゲーム終了

    let score = 0;      // スコア
    let timer = 30;     // タイマー（秒）

    let countdown = 3;              // 準備中のカウントダウン
    let wordsFile = ""txt/words.txt"";    // 問題が格納されたテキストファイル

    let gameState = READY;      // タイピングゲームの状態
    let typing = new Typing();  // タイピングクラス

    let flashingText = new FlashingText(""input"", ""スペースを押してください！！"", 1000, 500, 0);

    let scoreText;
    let timerText;

    let subject;        // 上段テキスト表示スペース：題名
    let input;          // 下段テキスト表示スペース：入力表示内容

    let statementList;  // 問題リスト
    let statement;      // 問題文
   ");
            WriteLiteral(@" let numOfStatement; // 問題文の何文字目かを表す番号

    window.addEventListener(""keydown"", handleKeydown);
    window.addEventListener(""keyup"", handleKeyup);

    // ページ読み込み時に実行する処理
    window.onload = function () {

        statementList = readTextFileToArray(wordsFile);
        typing.insertKeyboard(""board"");

        // 0:準備中
        if (gameState == READY) {

            flashingText.flash();   // 開始前のテキスト点滅表示
        }
    }

    // ---- ---- ---- ---- ----
    // Key 処理 start

    // Keydown 処理
    function handleKeydown(event) {

        // 入力文字の処理
        let chara = typing.checkWord(event);
        // alert(""押されたキーのコード : "" + event.keyCode);

        // 0:準備中
        if (gameState == READY) {
            if (event.keyCode == 32) {    // スペースを押すと
                startReady();           // 問題開始前の準備へ
            }
        }

        // 1:タイピングゲーム中
        if (gameState == PLAYING) {
            judgeTyping(chara);         // 打ち込まれた文字の正誤判定へ
        }
    }

    // Keyup 処理
  ");
            WriteLiteral(@"  function handleKeyup(event) {

        // CapsLock確認
        let capslock;

        if (typing.checkCapsLock(event) == 1) {
            capslock = document.getElementById('capslock');
            capslock.innerHTML = ""CapsLock ON"";
        } else {
            capslock = document.getElementById('capslock');
            capslock.innerHTML = ""CapsLock OFF"";
        }
    }

    // Key 処理 end
    // ---- ---- ---- ---- ----

    // ゲーム開始前の準備
    function startReady() {

        flashingText.setMsg(""まもなく開始します..."");
        flashingText.setIsFlashing(0);  // 点滅を停止

        // subject IDタグにカウントダウンを表示
        subject = document.getElementById('subject');
        subject.innerHTML = countdown;

        // 1秒おきにカウントダウン
        let id = setInterval(function () {
            countdown--;
            console.log(countdown);

            subject.innerHTML = countdown;

            if (countdown <= 0) {
                clearInterval(id);
                console.log(""Finish!"");
       ");
            WriteLiteral(@"         gameState = PLAYING;

                startTimer();   // 残り時間のカウントダウンスタート
                loadSubject();  // 問題文の読み込みへ
            }
        }, 1000);
    }

    // 問題文を読み込み
    function loadSubject() {

        // statementList = [""Test"", ""Apple"", ""Banana""];

        // 問題リストからランダムに問題を取り出す
        statement = statementList[Math.floor(Math.random() * statementList.length)];

        // 問題文の表示
        subject = document.getElementById('subject');
        subject.innerHTML = statement;

        // 入力内容の表示
        subject = document.getElementById('input');
        subject.innerHTML = """";

        numOfStatement = 0;

        // alert(""タイピング文字："" + statement.substr(numOfStatement, 1));

        // キーボードの正解文字を色変え
        typing.active(statement, numOfStatement);
    }

    // 残り時間をカウントダウン
    function startTimer() {

        // timer IDタグにカウントダウンを表示
        timerText = document.getElementById('timer');
        timerText.innerHTML = ""残り時間："" + timer;


        // 1秒おき");
            WriteLiteral(@"にカウントダウン
        let id = setInterval(function () {
            timer--;
            console.log(timer);

            timerText.innerHTML = ""残り時間："" + timer;

            if (timer <= 0) {
                if (gameState == PLAYING) {
                    // 終了処理
                    subject = document.getElementById('subject');
                    subject.innerHTML = ""---- 終了 ----"";
                    // alert(""終了！！"");
                    gameState = END;
                    clearInterval(id);
                }
            }
        }, 1000);
    }

    // 打ち込まれた文字の正誤判定
    function judgeTyping(chara) {
        let seikai = statement.substr(numOfStatement, 1);

        if (chara == seikai) {
            // 正解の場合
            score = score + 10;

            // 正解文字を追加（input IDタグに追記）
            let input = document.getElementById('input');
            input.innerHTML = input.innerHTML + chara;

            // 次の文字へ
            numOfStatement = numOfStatement + 1;

            if");
            WriteLiteral(@" (statement.length != numOfStatement) {
                // 問題文の文字が続く場合
                typing.active(statement, numOfStatement);

            } else {
                score = score + 50;
                // 次の問題へ
                loadSubject();
            }

        } else {
            // 間違いの場合
            // 何もしない
        }

        // スコアを更新
        scoreText = document.getElementById('score');
        scoreText.innerHTML = ""スコア："" + score;
    }

// JavaScript end
// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
</script>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "459904788f11b54d867dab8cba2f40a0b70f1c899146", async() => {
                WriteLiteral(@"
    <!-- パネル表示 -->
    <div id=""panel"">
        <div id=""score"">スコア：0</div>
        <div id=""timer"">残り時間：--</div>
        <div id=""capslock"">CapsLock --</div>
        <div id=""subject"">タイピングゲーム</div>
        <div id=""input"">input</div>
    </div>
    <!-- キーボード表示 -->
    <div id=""board"">
    </div>

    <input id=""Button1"" type=""button"" value=""button"" />
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<foot>\r\n\r\n</foot>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
